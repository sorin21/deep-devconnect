================ Redux & Authentication ================

1.  npm i redux react-redux redux-thunk
  - redux = is the state management system
  - react-redux = a library that puts toghether react and redux
  - redux-thunk = a middleware that looks to every action and if is a function, it calls that function

  - add Provider in App.js and createStore and applyMidleware in store.js
  - in store.js add reducers folder, tool for redux inspector

2. Create reducers folders
3. Create authReducer.js, errorReducer.js
4. Create index.js in reducers and add combineRdeducers
5. Create actions folder
6. Create authAction
7. Add in register.js connect, mapDispatchToProps, mapStateToProps, propTypes
8. Add in mapStateToProps auth and errors
9. Add withRouter in Register.js and:
  this.props.onRegisterUser(newUser, this.props.history)
to have history in authReducer.js
10. Create the loginUser action

11. Install jwt decode to decode token and extract the user from it 
  - npm i jwt-decode
  - implement jwt decode in loginUser

12. Create validation folder and add is-empty.js file, same from backend validation folder
  - add isEmpty function in authReducer.js

13. Add connect, propTypes and errors inside HTML to Login.js
14. Add classnames to Login.js

15. Add setAuthToken, jwt-decode, SET_CURRENT_USER in App.js 
  - we use setCurrentUser for login and logout
16. Create logoutUser action in authActions.js

17. Add connect in Navbar.js 
18. Create authLink, for authorized user and guestLinks and put a condition to see them
  - {isAuthenticated ? authLinks : guestLinks}

19. Check if the token is expired to logout the user
  - decoded.exp < currentTime
  - if the token is expired redirect to login
  - window.location.href = "/login";

20. If the user is logged in we don't want to see login, register, or landing so we add in getDerivedStateFromProps method this:
  -  if (nextProps.auth.isAuthenticated) {
      nextProps.history.push('/dashboard');
    }
